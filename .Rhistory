a <- 1:10
a
cube <- function( x, n) {x3}
cube( 3)
cube <- function( x, n) {x^3}
cube( 3)
x <- 1:10
if(x>5){x<-0}
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
students
?gather
gather( data=students, sex, count, -grade)
students2
res <- gather( data=students, sex_class, count, -grade)
res <- gather( data=students2, sex_class, count, -grade)
res
?separate
separat( data = res, col = sex_class, into = c("sex", "class"))
separate( data = res, col = sex_class, into = c("sex", "class"))
submit()
students2 %>%
gather( sex_class, count, -grade) %>%
separate( sex_class, c("sex", "class")) %>%
print
submit()
students3
?gather
students3 %>%
gather( class, grade, -class1:class5 , na.rm = TRUE) %>%
print
students3 %>%
gather( class, grade, class1:class5 , na.rm = TRUE) %>%
print
submit()
submit()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, class ) %>%
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, grade ) %>%
print
submit()
extract_numeric("class5")
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate( class=extract_numeric(class)) %>%
print
submit()
students4
student_info <- students4 %>%
select( id, name, sex ) %>%
print
?select
submit()
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
gradebook <- students4 %>%
select( id, class, midterm, final) %>%
print
submit()
passed
failed
?mutate
mutate( passed, status="passed")
passed
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list( passed, failed)
sat
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate( part_sex, c( "part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by( part, sex) %>%
mutate( total=sum( count), prop=count/total  ) %>%
print
submit
submit()
Sys.getlocale( "LC_TIME")
library( lubridate)
help( package=lubridate)
this_day=today()
this_day <- today()
this_day
year( this_day)
wday( this_day)
wday( this_day, label=TRUE)
this_moment <- now()
this_moment
second( this_moment)
my_date <- ymd("1989-05-17")
my_date
class( my_datre)
class( my_date)
ymd( "1989 May 17")
ymd( "1989 Mei 17")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
dist( dataFrame)
hclust( distxy)
hc <- hclust( distxy)
plot( hc)
plot( as.dendrogram( hc))
abline( h=1.5, col="blue" )
abline( h=.4, col="red" )
5
5
inf()
info()
play()
abline( h=.5, col="red" )
nxt()
12
abline( h=.05, col="green" )
dist( dFsm)
hc( dFsm)
plot( hc)
hc
swirl()
swirl()
cmat
points( cx, cy, col=c("red","orange","purple"), pch( 3), cex=2, lwd=2)
points( cx, cy, col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist( x, y, cx, cy)
apply( distTmp, 2, which.min)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
summary( nlme)
nlme
summary( weight)
xyplot(weight ~ Time | BodyWeight, Diet)
?xyplot
xyplot(weight ~ Time | Diet)
xyplot(weight ~ Time | Diet, BodyWeight)
summary( Bodyweight)
?nlme
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
xyplot(weight ~ Time | Rat, BodyWeight)
summary( BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library( ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes(votes, rating))
print( g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(Wind, Ozone, data = airquality, geom = "smooth")
# Get the required packages
library(plyr)
library(ggplot2)
# Sourcing the downloadData.r script to upload and unzip the required data.
source("downloadData.r")
# Read the data files
## Will take a while, keep your shirt on... ;-)
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
#  Create Data
## First extract all source codes corresponding to coal combustion
## Used this link to figure out which field to filter on (EI.Sector)
coalCombustionSCC <- subset(SCC$SCC, EI.Sector %in% c("Fuel Comb - Comm/Institutional - Coal",
"Fuel Comb - Electric Generation - Coal",
"Fuel Comb - Industrial Boilers, ICEs - Coal"))
## Subset NEI data on these source codes
coalCombustion <- subset(NEI, SCC %in% coalCombustionSCC$SCC)
# Sum PM25 by year
coalCombPM25ByYear  <- ddply(coalCombustion, .(year), function(x) sum(x$Emissions))
colnames(coalCombPM25ByYear )[2] <- "Emissions"
# Open the output (plot) file
png("plot 4.png")
# Create the plot
## Line graph with points for each year where we have data
## and with tick marks for only those years, so it's clear which
## years this data is based on.
ggplot(coalCombPM25ByYear ,aes( x=factor(year), y=Emissions)) +
geom_point() +
geom_line() +
labs(x="Year", y=expression("Total" ~ PM[2.5] ~ "Emissions (tons)")) +
labs(title=expression("Baltimore City" ~ PM[2.5] ~ "Emissions by Year"))
# Remember to always close the graphics device!
dev.off()
require(devtools)
install.packages("devtools")
require(devtools)
require( devtools)
find_rtools()
install_github('rCharts', 'ramnathv')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages("rcharts")
install( rCharts)
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
?rPlot
??rPlot
data( economics, package="ggplot2")
econ <- transform( economics, date = as.character( date))
m1 <- mPlot( x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
library( rCharts)
m1 <- mPlot( x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$set(pointSize = 3, lineWidth = 1)
m1$set(pointSize = 3, lineWidth = 10)
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
n1
setwd( "F:/My Documents/GitHub/RepData_PeerAssessment1")
Sys.setlocale("LC_TIME", "English") ## to make sure that weekdays are displayed in the right format
library( ggplot2) 					## using ggplot library to plot graphs
filePath <- "./activity.zip"
unzip( filePath, exdir="./data")
acData <- read.csv( './data/activity.csv', header = TRUE, sep = ",",
colClasses=c( "numeric", "character", "numeric"))
acData$date <- as.Date(acData$date, format = "%Y-%m-%d")
acData$interval <- as.factor(acData$interval)
stepsDay <- aggregate(steps ~ date, acData, FUN=sum, na.rm=TRUE)
stepsDay <- aggregate(steps ~ date, acData, FUN=sum, na.rm=TRUE)
histPlot <- ggplot( stepsDay, aes( x=steps)) +
geom_histogram( binwidth=1000) +
labs( title="Histogram of Steps Taken per Day",
x="Number of Steps per Day (binwidth=1000)", y="Count")
histPlot
stepsMean   <- mean( stepsDay$steps, na.rm=TRUE)
stepsMedian <- median( stepsDay$steps, na.rm=TRUE)
format( stepsMean,digits = 8)
